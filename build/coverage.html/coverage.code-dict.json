{"/home/travis/build/npmtest/node-npmtest-loggly/test.js":"/* istanbul instrument in package npmtest_loggly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-loggly/lib.npmtest_loggly.js":"/* istanbul instrument in package npmtest_loggly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_loggly = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_loggly = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-loggly/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-loggly && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_loggly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_loggly\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_loggly.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_loggly.rollup.js'] =\n            local.assetsDict['/assets.npmtest_loggly.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_loggly.__dirname +\n                    '/lib.npmtest_loggly.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-loggly/node_modules/loggly/lib/loggly.js":"/*\n * loggly.js: Wrapper for node-loggly object\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENSE\n *\n */\n\nvar loggly = exports;\n\n//\n// Export node-loggly core client APIs\n//\nloggly.version       = require('../package.json').version;\nloggly.createClient  = require('./loggly/client').createClient;\nloggly.serialize     = require('./loggly/common').serialize;\nloggly.Loggly        = require('./loggly/client').Loggly;\n\n//\n// Export Resources for node-loggly\n//\nloggly.Search = require('./loggly/search').Search;\n","/home/travis/build/npmtest/node-npmtest-loggly/node_modules/loggly/lib/loggly/client.js":"/*\n * client.js: Core client functions for accessing Loggly\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENSE\n *\n */\n\nvar events = require('events'),\n    util = require('util'),\n    qs = require('querystring'),\n    common = require('./common'),\n    loggly = require('../loggly'),\n    Search = require('./search').Search,\n    stringifySafe = require('json-stringify-safe');\n\nfunction stringify(msg) {\n  var payload;\n\n  try { payload = JSON.stringify(msg) }\n  catch (ex) { payload = stringifySafe(msg, null, null, noop) }\n\n  return payload;\n}\n//\n// function createClient (options)\n//   Creates a new instance of a Loggly client.\n//\nexports.createClient = function (options) {\n  return new Loggly(options);\n};\n\n//\n// ### function Loggly (options)\n// #### @options {Object} Options for this Loggly client\n// ####   @subdomain\n// ####   @token\n// ####   @json\n// ####   @auth\n// ####   @tags\n// Constructor for the Loggly object\n//\nvar Loggly = exports.Loggly = function (options) {\n  if (!options || !options.subdomain || !options.token) {\n    throw new Error('options.subdomain and options.token are required.');\n  }\n\n  events.EventEmitter.call(this);\n  this.subdomain    = options.subdomain;\n  this.token        = options.token;\n  this.host         = options.host || 'logs-01.loggly.com';\n  this.json         = options.json || null;\n  this.auth         = options.auth || null;\n  this.proxy        = options.proxy || null;\n  this.userAgent    = 'node-loggly ' + loggly.version;\n  this.useTagHeader = 'useTagHeader' in options ? options.useTagHeader : true;\n\n  //\n  // Set the tags on this instance.\n  //\n  this.tags = options.tags\n    ? this.tagFilter(options.tags)\n    : null;\n\n  var url   = 'https://' + this.host,\n      api   = options.api  || 'apiv2';\n\n  this.urls = {\n    default: url,\n    log:     [url, 'inputs', this.token].join('/'),\n    bulk:    [url, 'bulk', this.token].join('/'),\n    api:     'https://' + [this.subdomain, 'loggly', 'com'].join('.') + '/' + api\n  };\n};\n\n//\n// Inherit from events.EventEmitter\n//\nutil.inherits(Loggly, events.EventEmitter);\n\n//\n// ### function log (msg, tags, callback)\n// #### @msg {string|Object} Data to log\n// #### @tags {Array} **Optional** Tags to send with this msg\n// #### @callback {function} Continuation to respond to when complete.\n// Logs the message to the token associated with this instance. If\n// the message is an Object we will attempt to serialize it. If any\n// `tags` are supplied they will be passed via the `X-LOGGLY-TAG` header.\n//  - http://www.loggly.com/docs/api-sending-data/\n//\nLoggly.prototype.log = function (msg, tags, callback) {\n  if (!callback && typeof tags === 'function') {\n    callback = tags;\n    tags = null;\n  }\n\n  var self = this,\n      logOptions;\n\n  //\n  // Remark: Have some extra logic for detecting if we want to make a bulk\n  // request to loggly\n  //\n  var isBulk = Array.isArray(msg);\n  function serialize(msg) {\n    if (msg instanceof Object) {\n      return self.json ? stringify(msg) : common.serialize(msg);\n    }\n    else {\n      return self.json ? stringify({ message: msg }) : msg;\n    }\n  }\n\n  msg = isBulk ? msg.map(serialize).join('\\n') : serialize(msg);\n\n  logOptions = {\n    uri:     isBulk ? this.urls.bulk : this.urls.log,\n    method:  'POST',\n    body:    msg,\n    proxy:   this.proxy,\n    headers: {\n      host:             this.host,\n      accept:           '*/*',\n      'user-agent':     this.userAgent,\n      'content-type':   this.json ? 'application/json' : 'text/plain',\n      'content-length': Buffer.byteLength(msg)\n    }\n  };\n\n  //\n  // Remark: if tags are passed in run the filter on them and concat\n  // with any tags that were passed or just use default tags if they exist\n  //\n  tags = tags\n    ? (this.tags ? this.tags.concat(this.tagFilter(tags)) : this.tagFilter(tags))\n    : this.tags;\n\n  //\n  // Optionally send `X-LOGGLY-TAG` if we have them\n  //\n  if (tags) {\n    // Decide whether to add tags as http headers or add them to the URI.\n    if (this.useTagHeader) {\n      logOptions.headers['X-LOGGLY-TAG'] = tags.join(',');\n    }\n    else {\n      logOptions.uri += '/tag/' + tags.join(',') + '/';\n    }\n  }\n\n  common.loggly(logOptions, callback, function (res, body) {\n    try {\n      var result = JSON.parse(body);\n      self.emit('log', result);\n      if (callback) {\n        callback(null, result);\n      }\n    }\n    catch (ex) {\n      if (callback) {\n        callback(new Error('Unspecified error from Loggly: ' + ex));\n      }\n    }\n  });\n\n  return this;\n};\n\n//\n// ### function tag (tags)\n// #### @tags {Array} Tags to use for `X-LOGGLY-TAG`\n// Sets the tags on this instance\n//\nLoggly.prototype.tagFilter = function (tags) {\n  var isSolid = /^[\\w\\d][\\w\\d-_.]+/;\n\n  tags = !Array.isArray(tags)\n    ? [tags]\n    : tags;\n\n  //\n  // TODO: Filter against valid tag names with some Regex\n  // http://www.loggly.com/docs/tags/\n  // Remark: Docs make me think we dont need this but whatevs\n  //\n  return tags.filter(function (tag) {\n    //\n    // Remark: length may need to use Buffer.byteLength?\n    //\n    return isSolid.test(tag) && tag.length <= 64;\n  });\n};\n\n//\n// ### function customer (callback)\n// ### @callback {function} Continuation to respond to.\n// Retrieves the customer information from the Loggly API:\n//   - http://www.loggly.com/docs/api-account-info/\n//\nLoggly.prototype.customer = function (callback) {\n  common.loggly({\n    uri: this.logglyUrl('customer'),\n    auth: this.auth\n  }, callback, function (res, body) {\n    var customer;\n    try { customer = JSON.parse(body) }\n    catch (ex) { return callback(ex) }\n    callback(null, customer);\n  });\n};\n\n//\n// function search (query, callback)\n//   Returns a new search object which can be chained\n//   with options or called directly if @callback is passed\n//   initially.\n//\n// Sample Usage:\n//\n//   client.search('404', function () { /* ... */ })\n//         .on('rsid', function (rsid) { /* ... */ })\n//\n//   client.search({ query: '404', rows: 100 })\n//         .on('rsid', function (rsid) { /* ... */ })\n//         .run(function () { /* ... */ });\n//\nLoggly.prototype.search = function (query, callback) {\n  var options = typeof query === 'string'\n    ? { query: query }\n    : query;\n\n  options.callback = callback;\n  return new Search(options, this);\n};\n\n//\n// function logglyUrl ([path, to, resource])\n//   Helper method that concats the string params into a url\n//   to request against a loggly serverUrl.\n//\nLoggly.prototype.logglyUrl = function (/* path, to, resource */) {\n  var args = Array.prototype.slice.call(arguments);\n  return [this.urls.api].concat(args).join('/');\n};\n\n//\n// Simple noop function for reusability\n//\nfunction noop() {}\n","/home/travis/build/npmtest/node-npmtest-loggly/node_modules/loggly/lib/loggly/common.js":"/*\n * common.js: Common utility functions for requesting against Loggly APIs\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENSE\n *\n */\n\nvar https = require('https'),\n    util = require('util'),\n    request = require('request'),\n    loggly = require('../loggly');\n\nvar common = exports;\n\n//\n// Failure HTTP Response codes based\n// off Loggly specification.\n//\nvar failCodes = common.failCodes = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Forbidden',\n  404: 'Not Found',\n  409: 'Conflict / Duplicate',\n  410: 'Gone',\n  500: 'Internal Server Error',\n  501: 'Not Implemented',\n  503: 'Throttled'\n};\n\n//\n// Success HTTP Response codes based\n// off Loggly specification.\n//\nvar successCodes = common.successCodes = {\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-authoritative information',\n  204: 'Deleted'\n};\n\n//\n// Core method that actually sends requests to Loggly.\n// This method is designed to be flexible w.r.t. arguments\n// and continuation passing given the wide range of different\n// requests required to fully implement the Loggly API.\n//\n// Continuations:\n//   1. 'callback': The callback passed into every node-loggly method\n//   2. 'success':  A callback that will only be called on successful requests.\n//                  This is used throughout node-loggly to conditionally\n//                  do post-request processing such as JSON parsing.\n//\n// Possible Arguments (1 & 2 are equivalent):\n//   1. common.loggly('some-fully-qualified-url', auth, callback, success)\n//   2. common.loggly('GET', 'some-fully-qualified-url', auth, callback, success)\n//   3. common.loggly('DELETE', 'some-fully-qualified-url', auth, callback, success)\n//   4. common.loggly({ method: 'POST', uri: 'some-url', body: { some: 'body'} }, callback, success)\n//\ncommon.loggly = function () {\n  var args = Array.prototype.slice.call(arguments),\n      success = args.pop(),\n      callback = args.pop(),\n      responded,\n      requestBody,\n      headers,\n      method,\n      auth,\n      proxy,\n      uri;\n\n  //\n  // Now that we've popped off the two callbacks\n  // We can make decisions about other arguments\n  //\n  if (args.length === 1) {\n    if (typeof args[0] === 'string') {\n      //\n      // If we got a string assume that it's the URI\n      //\n      method = 'GET';\n      uri    = args[0];\n    }\n    else {\n      method      = args[0].method || 'GET';\n      uri         = args[0].uri;\n      requestBody = args[0].body;\n      auth        = args[0].auth;\n      headers     = args[0].headers;\n      proxy       = args[0].proxy;\n    }\n  }\n  else if (args.length === 2) {\n    method = 'GET';\n    uri    = args[0];\n    auth   = args[1];\n  }\n  else {\n    method = args[0];\n    uri    = args[1];\n    auth   = args[2];\n  }\n\n  function onError(err) {\n    if (!responded) {\n      responded = true;\n      if (callback) { callback(err) }\n    }\n  }\n\n  var requestOptions = {\n    uri: uri,\n    method: method,\n    headers: headers || {},\n    proxy: proxy\n  };\n\n  if (auth) {\n    requestOptions.headers.authorization = 'Basic ' + new Buffer(auth.username + ':' + auth.password).toString('base64');\n  }\n\n  if (requestBody) {\n    requestOptions.body = requestBody;\n  }\n\n  try {\n    request(requestOptions, function (err, res, body) {\n      if (err) {\n        return onError(err);\n      }\n\n      var statusCode = res.statusCode.toString();\n      if (Object.keys(failCodes).indexOf(statusCode) !== -1) {\n        return onError((new Error('Loggly Error (' + statusCode + '): ' + failCodes[statusCode])));\n      }\n\n      success(res, body);\n    });\n  }\n  catch (ex) {\n    onError(ex);\n  }\n};\n\n//\n// ### function serialize (obj, key)\n// #### @obj {Object|literal} Object to serialize\n// #### @key {string} **Optional** Optional key represented by obj in a larger object\n// Performs simple comma-separated, `key=value` serialization for Loggly when\n// logging for non-JSON values.\n//\ncommon.serialize = function (obj, key) {\n  if (obj === null) {\n    obj = 'null';\n  }\n  else if (obj === undefined) {\n    obj = 'undefined';\n  }\n  else if (obj === false) {\n    obj = 'false';\n  }\n\n  if (typeof obj !== 'object') {\n    return key ? key + '=' + obj : obj;\n  }\n\n  var msg = '',\n      keys = Object.keys(obj),\n      length = keys.length;\n\n  for (var i = 0; i < length; i++) {\n    if (Array.isArray(obj[keys[i]])) {\n      msg += keys[i] + '=[';\n\n      for (var j = 0, l = obj[keys[i]].length; j < l; j++) {\n        msg += common.serialize(obj[keys[i]][j]);\n        if (j < l - 1) {\n          msg += ', ';\n        }\n      }\n\n      msg += ']';\n    }\n    else {\n      msg += common.serialize(obj[keys[i]], keys[i]);\n    }\n\n    if (i < length - 1) {\n      msg += ', ';\n    }\n  }\n\n  return msg;\n};\n\n//\n// function clone (obj)\n//   Helper method for deep cloning pure JSON objects\n//   i.e. JSON objects that are either literals or objects (no Arrays, etc)\n//\ncommon.clone = function (obj) {\n  var clone = {};\n  for (var i in obj) {\n    clone[i] = obj[i] instanceof Object ? common.clone(obj[i]) : obj[i];\n  }\n\n  return clone;\n};\n","/home/travis/build/npmtest/node-npmtest-loggly/node_modules/loggly/lib/loggly/search.js":"/*\n * search.js: chainable search functions for Loggly\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENSE\n *\n */\n\nvar events = require('events'),\n    util = require('util'),\n    qs = require('querystring'),\n    timespan = require('timespan'),\n    common = require('./common');\n\n//\n// ### function Search (options, client, callback)\n// #### @options {Object} Options for the search instance\n// #### @client {Loggly} Loggly API client\n// Chainable search object for Loggly API\n//\nvar Search = exports.Search = function (options, client) {\n  if (!options || (!options.query && !options.q)) {\n    throw new Error('options.query is required to execute a Loggly search.');\n  }\n\n  events.EventEmitter.call(this);\n\n  if (options.query) {\n    options.q = options.query;\n    delete options.query;\n  }\n\n  this.options = options;\n  this.client  = client;\n\n  //\n  // If we're passed a callback, run immediately.\n  //\n  if (options.callback) {\n    this.callback = options.callback;\n    delete options.callback;\n    this.run();\n  }\n};\n\n//\n// Inherit from events.EventEmitter\n//\nutil.inherits(Search, events.EventEmitter);\n\n//\n// ### function run (callback)\n// #### @callback {function} Continuation to respond to when complete\n// Runs the search query for for this instance with the query, and\n// other parameters that have been configured on it.\n//\nSearch.prototype.run = function (callback) {\n  var self = this,\n      responded;\n\n  //\n  // Trim the search query\n  //\n  this.options.q.trim();\n\n  //\n  // Update the callback for this instance if it's passed\n  //\n  this.callback = callback || this.callback;\n  if (!this.callback) {\n    throw new Error('Cannot run search without a callback function.');\n  }\n\n  //\n  // ### function respond (arguments...)\n  // Responds only once.\n  //\n  function respond() {\n    if (!responded) {\n      responded = true;\n      self.callback.apply(null, arguments);\n    }\n  }\n\n  //\n  // ### function awaitResults (rsid)\n  // Checks the Loggly API on an interval for the\n  // results from the specified `rsid`.\n  //\n  function awaitResults(rsid) {\n    if (!rsid || !rsid.id) {\n      return respond(rsid);\n    }\n\n    common.loggly({\n      uri:  self.client.logglyUrl('events?' + qs.stringify({ rsid: rsid.id })),\n      auth: self.client.auth,\n      json: true\n    }, respond, function (res, body) {\n      var results;\n      try { results = JSON.parse(body) }\n      catch (ex) { return respond(ex) }\n      respond(null, results);\n    });\n  }\n\n  //\n  // Check any time ranges (if supplied) to ensure\n  // they are valid.\n  //\n  this._checkRange();\n\n  common.loggly({\n    uri:  this.client.logglyUrl('search?' + qs.stringify(this.options)),\n    auth: this.client.auth,\n    json: true\n  }, this.callback, function (res, body) {\n    var rsid;\n    try { rsid = JSON.parse(body).rsid }\n    catch (ex) { rsid = ex }\n\n    self.emit('rsid', rsid);\n    awaitResults(rsid);\n  });\n\n  return this;\n};\n\n//\n// ### function _checkRange ()\n// Checks if the range that has been configured for this\n// instance is valid and updates if it is not.\n//\nSearch.prototype._checkRange = function () {\n  if (!this.options.until && !this.options.from) {\n    return;\n  }\n\n  this.options.until = this.options.until || 'now';\n  this.options.from  = this.options.from  || '-24h';\n\n  if (!timespan.parseDate(this.options.until)) {\n    this.options.until = 'now';\n  }\n\n  if (!timespan.parseDate(this.options.from)) {\n    this.options.from = '-24h';\n  }\n\n  if (timespan.fromDates(this.options.from, this.options.until) < 0\n    || this.options.until === this.options.from) {\n    //\n    // If the length of the timespan for this Search instance is\n    // negative then set it to default values\n    //\n    this.options.until = 'now';\n    this.options.from = '-24h';\n  }\n\n  return this;\n};\n"}